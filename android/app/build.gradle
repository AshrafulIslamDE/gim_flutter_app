def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
   // throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
        //checkReleaseBuilds false
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.ejogajog.serviceseeker"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias 'ejogajog_dev_key'
            keyPassword 'android'
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword 'android'
        }
    }

    /* For Android Prod release
    signingConfigs {
        release {
            keyAlias 'ejogajog_prod_key'
            keyPassword 'uUu>u4[A;Uv!wFG*'
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword 'uUu>u4[A;Uv!wFG*'
        }
    }*/

        buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
        }
        debug{

        }
    }
    productFlavors {
        flavorDimensions "environment"

        dev {
            dimension "environment"
            manifestPlaceholders = [appLabel:"GIM-Dev"]
            versionNameSuffix "-dev"
        }
        QaTest {
            dimension "environment"
            manifestPlaceholders = [appLabel:"GIM-QaTest"]
            versionNameSuffix "-QaTest"

        }
        qa {
            dimension "environment"
            manifestPlaceholders = [appLabel:"GIM-Qa"]
            versionNameSuffix "-qa"

        }
        staging {
            dimension "environment"
            manifestPlaceholders = [appLabel:"GIM-Staging"]
            versionNameSuffix "-staging"
        }
        prod {
            applicationId "com.gim.customer"
            manifestPlaceholders = [appLabel:"GIM"]
            dimension "environment"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.google.firebase:firebase-messaging:20.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation 'com.google.firebase:firebase-analytics:17.6.0'
}